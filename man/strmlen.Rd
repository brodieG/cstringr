% Generated by roxygen2 (4.0.2): do not edit by hand
\name{strmlen}
\alias{smprintf2}
\alias{strmlen}
\alias{strmtrunc}
\title{"Safe" String Manipulation Functions}
\usage{
strmlen(str, maxlen = 10000L)
}
\arguments{
\item{str}{charater(1L) string to measure or truncate}

\item{maxlen}{integer(1L) size limit to truncate to, or to limit tokens to}

\item{format}{character(1L) string to use as format template}

\item{a}{character(1L) another string}

\item{b}{character(1L) another string}
}
\value{
integer(1L) for \code{strmlen}, character(1L) for \code{strmtrunc}
  and \code{smprintf2}
}
\description{
Implements variants of \code{strlcpy}, \code{strnlen}, etc.
}
\details{
These functions are intended to be used directly from C but are exposed here
for testing purposes.  They differ from similar existing versions in these
respects:

\itemize{
  \item Input strings are never modified; if changes are required to comply
    with length limits a copy that is \code{R_alloc}ed is returned
  \item Only C99 code is used
}
Function specific details follow.  Pay attention, the interfaces are not
exactly the same as the \code{C} functions they intend to replace (e.g.
\code{smprintf} does not have a \code{str} parameter like \code{snprintf}).

\itemize{
  \item \code{strmlen}: roughly equivalent to POSIX \code{strnlen}, but
    should be fully portable
  \item \code{strmtrunc}: if \code{strmlen(str)} is greater than \code{maxlen},
    returns a copy of \code{str} with \code{'\0'} as the \code{maxlen}th
    character (note return character array is not allocated beyond this NULL),
    otherwise returns \code{str}
  \item \code{smprintf2}: returns a newly \code{R_alloc}ed string that is just
    large enough to fit the combination of the format string and the tokens
    to sub in (note that tokens must be character so only "%s" is meaningful
    as a formatting element).  To achieve this without overflow, ensures that
    \code{format} and each token is limited to \code{maxlen - 1} characters.
    Fails if result string is longer than a \code{size_t} could index.  Note
    that internally we define \code{smprintf1} - \code{smprintf6}, but we are
    only exporting the one function directly to R for testing.
}
}

